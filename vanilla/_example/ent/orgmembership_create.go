// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/entx/vanilla/_example/ent/enums"
	"github.com/theopenlane/entx/vanilla/_example/ent/organization"
	"github.com/theopenlane/entx/vanilla/_example/ent/orgmembership"
)

// OrgMembershipCreate is the builder for creating a OrgMembership entity.
type OrgMembershipCreate struct {
	config
	mutation *OrgMembershipMutation
	hooks    []Hook
}

// SetRole sets the "role" field.
func (_c *OrgMembershipCreate) SetRole(v enums.Role) *OrgMembershipCreate {
	_c.mutation.SetRole(v)
	return _c
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_c *OrgMembershipCreate) SetNillableRole(v *enums.Role) *OrgMembershipCreate {
	if v != nil {
		_c.SetRole(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization_id" field.
func (_c *OrgMembershipCreate) SetOrganizationID(v string) *OrgMembershipCreate {
	_c.mutation.SetOrganizationID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OrgMembershipCreate) SetUserID(v string) *OrgMembershipCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OrgMembershipCreate) SetID(v string) *OrgMembershipCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_c *OrgMembershipCreate) SetOrganization(v *Organization) *OrgMembershipCreate {
	return _c.SetOrganizationID(v.ID)
}

// Mutation returns the OrgMembershipMutation object of the builder.
func (_c *OrgMembershipCreate) Mutation() *OrgMembershipMutation {
	return _c.mutation
}

// Save creates the OrgMembership in the database.
func (_c *OrgMembershipCreate) Save(ctx context.Context) (*OrgMembership, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrgMembershipCreate) SaveX(ctx context.Context) *OrgMembership {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrgMembershipCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrgMembershipCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrgMembershipCreate) defaults() {
	if _, ok := _c.mutation.Role(); !ok {
		v := orgmembership.DefaultRole
		_c.mutation.SetRole(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrgMembershipCreate) check() error {
	if _, ok := _c.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "OrgMembership.role"`)}
	}
	if v, ok := _c.mutation.Role(); ok {
		if err := orgmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrgMembership.role": %w`, err)}
		}
	}
	if _, ok := _c.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrgMembership.organization_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OrgMembership.user_id"`)}
	}
	if len(_c.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrgMembership.organization"`)}
	}
	return nil
}

func (_c *OrgMembershipCreate) sqlSave(ctx context.Context) (*OrgMembership, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgMembership.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrgMembershipCreate) createSpec() (*OrgMembership, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgMembership{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orgmembership.Table, sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Role(); ok {
		_spec.SetField(orgmembership.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(orgmembership.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.OrganizationTable,
			Columns: []string{orgmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgMembershipCreateBulk is the builder for creating many OrgMembership entities in bulk.
type OrgMembershipCreateBulk struct {
	config
	err      error
	builders []*OrgMembershipCreate
}

// Save creates the OrgMembership entities in the database.
func (_c *OrgMembershipCreateBulk) Save(ctx context.Context) ([]*OrgMembership, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrgMembership, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgMembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrgMembershipCreateBulk) SaveX(ctx context.Context) []*OrgMembership {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrgMembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrgMembershipCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
