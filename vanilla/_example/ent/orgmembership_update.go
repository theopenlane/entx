// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/entx/vanilla/_example/ent/enums"
	"github.com/theopenlane/entx/vanilla/_example/ent/orgmembership"
	"github.com/theopenlane/entx/vanilla/_example/ent/predicate"
)

// OrgMembershipUpdate is the builder for updating OrgMembership entities.
type OrgMembershipUpdate struct {
	config
	hooks    []Hook
	mutation *OrgMembershipMutation
}

// Where appends a list predicates to the OrgMembershipUpdate builder.
func (_u *OrgMembershipUpdate) Where(ps ...predicate.OrgMembership) *OrgMembershipUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRole sets the "role" field.
func (_u *OrgMembershipUpdate) SetRole(v enums.Role) *OrgMembershipUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *OrgMembershipUpdate) SetNillableRole(v *enums.Role) *OrgMembershipUpdate {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// Mutation returns the OrgMembershipMutation object of the builder.
func (_u *OrgMembershipUpdate) Mutation() *OrgMembershipMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrgMembershipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgMembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrgMembershipUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgMembershipUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrgMembershipUpdate) check() error {
	if v, ok := _u.mutation.Role(); ok {
		if err := orgmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrgMembership.role": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrgMembership.organization"`)
	}
	return nil
}

func (_u *OrgMembershipUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmembership.Table, orgmembership.Columns, sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(orgmembership.FieldRole, field.TypeEnum, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrgMembershipUpdateOne is the builder for updating a single OrgMembership entity.
type OrgMembershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgMembershipMutation
}

// SetRole sets the "role" field.
func (_u *OrgMembershipUpdateOne) SetRole(v enums.Role) *OrgMembershipUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *OrgMembershipUpdateOne) SetNillableRole(v *enums.Role) *OrgMembershipUpdateOne {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// Mutation returns the OrgMembershipMutation object of the builder.
func (_u *OrgMembershipUpdateOne) Mutation() *OrgMembershipMutation {
	return _u.mutation
}

// Where appends a list predicates to the OrgMembershipUpdate builder.
func (_u *OrgMembershipUpdateOne) Where(ps ...predicate.OrgMembership) *OrgMembershipUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrgMembershipUpdateOne) Select(field string, fields ...string) *OrgMembershipUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrgMembership entity.
func (_u *OrgMembershipUpdateOne) Save(ctx context.Context) (*OrgMembership, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgMembershipUpdateOne) SaveX(ctx context.Context) *OrgMembership {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrgMembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgMembershipUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrgMembershipUpdateOne) check() error {
	if v, ok := _u.mutation.Role(); ok {
		if err := orgmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrgMembership.role": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrgMembership.organization"`)
	}
	return nil
}

func (_u *OrgMembershipUpdateOne) sqlSave(ctx context.Context) (_node *OrgMembership, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmembership.Table, orgmembership.Columns, sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrgMembership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgmembership.FieldID)
		for _, f := range fields {
			if !orgmembership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgmembership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(orgmembership.FieldRole, field.TypeEnum, value)
	}
	_node = &OrgMembership{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
