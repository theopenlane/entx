{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "historyFromMutation" }}
// Code generated by enthistory, DO NOT EDIT.
	{{ $pkg := base $.Config.Package }}
	{{ template "header" $ }}
	var (
		idNotFoundError = errors.New("could not get id from mutation")
	)
	func EntOpToHistoryOp(op ent.Op) enthistory.OpType {
		switch op {
		case ent.OpDelete, ent.OpDeleteOne:
			return enthistory.OpTypeDelete
		case ent.OpUpdate, ent.OpUpdateOne:
			return enthistory.OpTypeUpdate
		default:
			return enthistory.OpTypeInsert
		}
	}

	{{ $updatedByKey := extractUpdatedByKey $.Annotations.HistoryConfig.UpdatedBy }}
	{{ $updatedByValueType := extractUpdatedByValueType $.Annotations.HistoryConfig.UpdatedBy }}
	{{ range $n := $.Nodes }}
		{{ $name := $n.Name }}
		{{ $history := hasSuffix $name "History" }}
		{{ if $history }}
		{{ else }}
			{{ $mutator := $n.MutationName }}
			{{ range $h := $.Nodes }}
				{{ $sameNodeType := hasPrefix $h.Name (printf "%sHistory" $name) }}
				{{ if $sameNodeType }}
					{{- if $.Annotations.HistoryConfig.Skipper }}
					func (m *{{ $mutator }}) skipper(ctx context.Context) bool {
						{{ $.Annotations.HistoryConfig.Skipper }}
					}
					{{- end }}

					func (m *{{ $mutator }}) CreateHistoryFromCreate(ctx context.Context) error {
					   {{- if $.Annotations.HistoryConfig.Skipper }}
					   if m.skipper(ctx) {
						   return nil
					   }

					   {{- end }}
					   client := m.Client()

					   {{ if not (eq $updatedByKey "") }}
					   updatedBy, _ := ctx.Value("{{ $updatedByKey }}").({{ $updatedByValueType }})
					   {{ end }}

						id, ok := m.ID()
						if !ok {
							return idNotFoundError
						}

						create := client.{{$h.Name}}.Create()

						create = create.
							SetOperation(EntOpToHistoryOp(m.Op())).
							SetHistoryTime(time.Now()).
							SetRef(id)

						{{- if not (eq $updatedByKey "") }}
							{{- if (eq $updatedByValueType "int") }}
							if updatedBy != 0 {
							{{- end }}
							{{- if (eq $updatedByValueType "string") }}
							if updatedBy != "" {
							{{- end }}
								create = create.SetUpdatedBy(updatedBy)
							}
						{{- end }}

						{{ range $f := $n.Fields }}
							if {{ camel $f.Name }}, exists := m.{{ $f.StructField }}(); exists {
								create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ if $f.Nillable }}&{{ end }}{{ camel $f.Name }})
							}
						{{ end }}
						_, err := create.Save(ctx)

						return err
					}

					func (m *{{ $mutator }}) CreateHistoryFromUpdate(ctx context.Context) error {
						{{- if $.Annotations.HistoryConfig.Skipper }}
						if m.skipper(ctx) {
							return nil
						}

						{{- end }}
						 // check for soft delete operation and delete instead
						if entx.CheckIsSoftDelete(ctx) {
							return m.CreateHistoryFromDelete(ctx)
						}
						client := m.Client()

						{{ if not (eq $updatedByKey "") }}
						updatedBy, _ := ctx.Value("{{ $updatedByKey }}").({{ $updatedByValueType }})
						{{ end }}

						ids, err := m.IDs(ctx)
						if err != nil {
							return fmt.Errorf("getting ids: %w", err)
						}

						for _, id := range ids {
							{{ camel $name }}, err := client.{{ $name }}.Get(ctx, id)
							if err != nil {
								return err
							}

							create := client.{{$h.Name}}.Create()

							create = create.
								SetOperation(EntOpToHistoryOp(m.Op())).
								SetHistoryTime(time.Now()).
								SetRef(id)

							{{- if not (eq $updatedByKey "") }}
								{{- if (eq $updatedByValueType "int") }}
								if updatedBy != 0 {
								{{- end }}
								{{- if (eq $updatedByValueType "string") }}
								if updatedBy != "" {
								{{- end }}
									create = create.SetUpdatedBy(updatedBy)
								}
							{{- end }}

						{{ range $f := $n.Fields }}
							if {{ camel $f.Name }}, exists := m.{{ $f.StructField }}(); exists {
								create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ if $f.Nillable }}&{{ end }}{{ camel $f.Name }})
							} else {
								create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ camel $name }}.{{ pascal $f.Name }})
							}
						{{ end }}
							if _, err := create.Save(ctx); err != nil {
								return err
							}
						}

						return nil
					}

					func (m *{{ $mutator }}) CreateHistoryFromDelete(ctx context.Context) error {
						{{- if $.Annotations.HistoryConfig.Skipper }}
						if m.skipper(ctx) {
							return nil
						}

						{{- end }}
						// check for soft delete operation and skip so it happens on update
						if entx.CheckIsSoftDelete(ctx) {
							return nil
						}
						client := m.Client()

						{{ if not (eq $updatedByKey "") }}
						updatedBy, _ := ctx.Value("{{ $updatedByKey }}").({{ $updatedByValueType }})
						{{ end }}

						ids, err := m.IDs(ctx)
						if err != nil {
							return fmt.Errorf("getting ids: %w", err)
						}

						for _, id := range ids {
							{{ camel $name }}, err := client.{{ $name }}.Get(ctx, id)
							if err != nil {
								return err
							}

							create := client.{{$h.Name}}.Create()

							{{- if not (eq $updatedByKey "") }}
								{{- if (eq $updatedByValueType "int") }}
								if updatedBy != 0 {
								{{- end }}
								{{- if (eq $updatedByValueType "string") }}
								if updatedBy != "" {
								{{- end }}
									create = create.SetUpdatedBy(updatedBy)
								}
							{{- end }}

							_, err = create.
								SetOperation(EntOpToHistoryOp(m.Op())).
								SetHistoryTime(time.Now()).
								SetRef(id).
							{{- range $f := $n.Fields }}
								Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ camel $name }}.{{ pascal $f.Name }}).
							{{- end }}
								Save(ctx)
							if err != nil {
								return err
							}
						}

						return nil
					}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}